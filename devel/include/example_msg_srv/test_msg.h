// Generated by gencpp from file example_msg_srv/test_msg.msg
// DO NOT EDIT!


#ifndef EXAMPLE_MSG_SRV_MESSAGE_TEST_MSG_H
#define EXAMPLE_MSG_SRV_MESSAGE_TEST_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace example_msg_srv
{
template <class ContainerAllocator>
struct test_msg_
{
  typedef test_msg_<ContainerAllocator> Type;

  test_msg_()
    : rotx()
    , roty()
    , rotz()  {
    }
  test_msg_(const ContainerAllocator& _alloc)
    : rotx(_alloc)
    , roty(_alloc)
    , rotz(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rotx_type;
  _rotx_type rotx;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _roty_type;
  _roty_type roty;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rotz_type;
  _rotz_type rotz;





  typedef boost::shared_ptr< ::example_msg_srv::test_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::example_msg_srv::test_msg_<ContainerAllocator> const> ConstPtr;

}; // struct test_msg_

typedef ::example_msg_srv::test_msg_<std::allocator<void> > test_msg;

typedef boost::shared_ptr< ::example_msg_srv::test_msg > test_msgPtr;
typedef boost::shared_ptr< ::example_msg_srv::test_msg const> test_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::example_msg_srv::test_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::example_msg_srv::test_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace example_msg_srv

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'example_msg_srv': ['/home/johann/catkin_ws/src/comp0127_lab/lab03_stack/example_msg_srv/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::example_msg_srv::test_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::example_msg_srv::test_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::example_msg_srv::test_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::example_msg_srv::test_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::example_msg_srv::test_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::example_msg_srv::test_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::example_msg_srv::test_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a848a7384d8bb575b0a921bed0b0de3";
  }

  static const char* value(const ::example_msg_srv::test_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a848a7384d8bb57ULL;
  static const uint64_t static_value2 = 0x5b0a921bed0b0de3ULL;
};

template<class ContainerAllocator>
struct DataType< ::example_msg_srv::test_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "example_msg_srv/test_msg";
  }

  static const char* value(const ::example_msg_srv::test_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::example_msg_srv::test_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 rotx\n\
std_msgs/Float64 roty\n\
std_msgs/Float64 rotz\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
";
  }

  static const char* value(const ::example_msg_srv::test_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::example_msg_srv::test_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotx);
      stream.next(m.roty);
      stream.next(m.rotz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::example_msg_srv::test_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::example_msg_srv::test_msg_<ContainerAllocator>& v)
  {
    s << indent << "rotx: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rotx);
    s << indent << "roty: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.roty);
    s << indent << "rotz: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rotz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXAMPLE_MSG_SRV_MESSAGE_TEST_MSG_H
