# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cw1q5_srv/quat2zyxRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class quat2zyxRequest(genpy.Message):
  _md5sum = "bb310d1d9861005dc8b6d49680a2d86e"
  _type = "cw1q5_srv/quat2zyxRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Quaternion q

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['q']
  _slot_types = ['geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       q

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(quat2zyxRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
    else:
      self.q = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.q.x, _x.q.y, _x.q.z, _x.q.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.q.x, _x.q.y, _x.q.z, _x.q.w,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.q.x, _x.q.y, _x.q.z, _x.q.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.q is None:
        self.q = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.q.x, _x.q.y, _x.q.z, _x.q.w,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cw1q5_srv/quat2zyxResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class quat2zyxResponse(genpy.Message):
  _md5sum = "c5166234939ddbad7844e2026f79c5fa"
  _type = "cw1q5_srv/quat2zyxResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Float64 x
std_msgs/Float64 y
std_msgs/Float64 z



================================================================================
MSG: std_msgs/Float64
float64 data"""
  __slots__ = ['x','y','z']
  _slot_types = ['std_msgs/Float64','std_msgs/Float64','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(quat2zyxResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
    else:
      self.x = std_msgs.msg.Float64()
      self.y = std_msgs.msg.Float64()
      self.z = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.x.data, _x.y.data, _x.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x.data, _x.y.data, _x.z.data,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.x.data, _x.y.data, _x.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.x is None:
        self.x = std_msgs.msg.Float64()
      if self.y is None:
        self.y = std_msgs.msg.Float64()
      if self.z is None:
        self.z = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x.data, _x.y.data, _x.z.data,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class quat2zyx(object):
  _type          = 'cw1q5_srv/quat2zyx'
  _md5sum = '41cba6f4cdcd1c3708cfcf0ee27a897a'
  _request_class  = quat2zyxRequest
  _response_class = quat2zyxResponse
